<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog do Eli - Python</title><link href="https://eliyarson.github.io/blog/" rel="alternate"></link><link href="https://eliyarson.github.io/blog/feeds/python.atom.xml" rel="self"></link><id>https://eliyarson.github.io/blog/</id><updated>2020-03-25T21:33:00-03:00</updated><entry><title>Construindo um blog em Pelican, Docker e Github Pages.</title><link href="https://eliyarson.github.io/blog/meu-blog.html" rel="alternate"></link><published>2020-03-25T18:07:00-03:00</published><updated>2020-03-25T21:33:00-03:00</updated><author><name>Eli Yarson</name></author><id>tag:eliyarson.github.io,2020-03-25:/blog/meu-blog.html</id><summary type="html">&lt;p&gt;Um pouco da minha jornada na construção desse blog.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Minha jornada com blogs&lt;/h3&gt;
&lt;p&gt;A primeira vez que fiz um blog foi em 2014, na época o blog utilizava WordPress como CMS, o que tornava o processo bem simples, com um conhecimento bem raso de programação era possível criar um site com um tema responsivo, e realizar publicações direto da interface do WordPress. 
Para esse blog eu queria algo leve (WordPress portanto é um no go) e simples de publicar.&lt;/p&gt;
&lt;h3&gt;Por que Pelican?&lt;/h3&gt;
&lt;p&gt;A minha primeira opção era usar Flask, pois já possuo um pouco de experiência em construção de APIs Flask. No entanto, Flask é um pouco de overkill para um site estático que serviria apenas como ferramenta de blogging, embora não fosse algo impossível. A vantagem de utilizar o Flask, embora desse um pouco mais de trabalho, seria a capacidade de criar um banco de dados em SQLite ou MongoDB, indexando os posts e criando um search engine no blog, além da possibilidade de comentar nos posts. Vi como seria pra fazer e decidi que por enquanto, um site estático me atenderia. (Priorize e simplifique!)  &lt;/p&gt;
&lt;p&gt;Pesquisei um pouco, e vi que Jekyll é bem popular, no entanto ele é escrito em Ruby. Queria algo similar, porém em Python.  &lt;/p&gt;
&lt;p&gt;OK, pesquisei então se existia uma framework similar ao Jekyll, porém feita em Python. E aí que me deparei com o &lt;a href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, um Framework que utiliza o &lt;a href="https://jinja.palletsprojects.com/en/2.11.x/"&gt;Jinja2&lt;/a&gt; para gerar temas e suporta a escrita Markdown e reStructuredText.  &lt;/p&gt;
&lt;p&gt;A princípio ele atendeu minhas necessidades. Agora o próximo passo foi procurar um lugar onde hospedar o site.&lt;/p&gt;
&lt;h3&gt;Github Pages&lt;/h3&gt;
&lt;p&gt;O Github Pages foi lançado em 2008, e é uma alternativa gratuita para hospedar sites estáticos armazenados em repositórios. E o melhor de tudo é que ele é gratuito. Basta criar um repositório, e na hora de dar o commit para um branch de sua escolha (pode ser o master, mas recomendo utilizar outro).  &lt;/p&gt;
&lt;p&gt;O site então pode ser acessado através da url:&lt;br&gt;
&lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repo&amp;gt;&lt;/code&gt;, substituindo user pelo seu usuário do Github e repo pelo nome do repositório.&lt;/p&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;p&gt;Como prova de conceito, eu queria criar uma imagem docker já com todas as dependências, com tudo configurado, e dessa maneira eu não precisaria instalar os vários pacotes adicionais apenas para manter o blog. Dessa maneira, se algum dia eu precisasse publicar em outro computador (no notebook do trabalho, em uma viagem por exemplo) eu conseguiria clonar meu repo no Github, e apenas com o Docker instalado eu seria capaz de compilar a imagem e publica-lá. &lt;/p&gt;
&lt;h3&gt;O processo&lt;/h3&gt;
&lt;p&gt;Dessa maneira, tentando manter as coisas simples e sem precisar começar tudo do zero, eu primeiro fui ler pra ver se alguém já tinha feito algo semelhante e quais os problemas que poderiam surgir.  &lt;/p&gt;
&lt;p&gt;Acabei encontrando &lt;a href="https://alexgose.com/build-blog-pelican-docker.html"&gt;esse post&lt;/a&gt; do Alex Gose, bem documentado e explicando de maneira simples como esse procedimento poderia ser feito. (kudos Alex!)  &lt;/p&gt;
&lt;p&gt;Na minha primeira tentativa, eu segui as instruções e fiz o commit no meu repositório, porém o site não funcionou.&lt;br&gt;
Após alguns minutos pesquisando, eu descobri o problema.  &lt;/p&gt;
&lt;p&gt;Eu havia criado um repositório com o nome &lt;code&gt;eliyarson.github.io&lt;/code&gt;, como sugerido pelo Github Pages, e feito o commit no branch &lt;code&gt;gh-pages&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Dessa maneira, eu conseguiria acessar o site pelo endereço &lt;code&gt;https://eliyarson.github.io&lt;/code&gt;, sem precisar especificar o nome do repositório. (No tutorial, o Alex cria um repositório chamado &lt;em&gt;mywebsite&lt;/em&gt;). O problema é que quando se utiliza esse endereço no nome do repositório, o Github não permite que voce faça o commit em outros branches, apenas no &lt;em&gt;master&lt;/em&gt;. Eu teria um site estático, porém não serviria meu propósito, de manter um 'gerador' de imagem Docker no meu repo.
Eu voltei ao tutorial do Alex, e segui o exemplo dele: criei um repo com o nome &lt;em&gt;blog&lt;/em&gt;, e no fim deu tudo certo.  &lt;/p&gt;
&lt;p&gt;Fiz algumas modificações, criei umas variáveis de ambiente para armazenar algumas credenciais e agilizar partes do processo, e criei um script shell para agilizar o processo de &lt;em&gt;build&lt;/em&gt; e &lt;em&gt;commit&lt;/em&gt; do blog.  &lt;/p&gt;
&lt;p&gt;No fim, consegui o que eu queria, embora o processo tenho sido um pouco mais complicado do que eu esperava.  &lt;/p&gt;
&lt;h3&gt;Próximos passos&lt;/h3&gt;
&lt;p&gt;Recentemente, eu comecei a ler sobre Golang, e estou achando uma linguagem bem interessante. Vou tentar fazer o que eu pensei em fazer no começo com Flask, porém em Go.  &lt;/p&gt;
&lt;p&gt;Acredito que será um desafio legal, e que me mostrará as diferenças de uma aplicação feita em Go e uma em Python.  &lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category></entry></feed>